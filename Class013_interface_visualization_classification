/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image = ee.Image("projects/mapbiomas-workspace/AMOSTRAS/GTAGUA/OBJETOS/CLASSIFICADOS/TESTE_1_raster/CH_PANT_1986"),
    table = ee.FeatureCollection("projects/mapbiomas-workspace/AMOSTRAS/GTAGUA/OBJETOS/CLASSIFICADOS/TESTE_1/CERR/AGUA_teste_1_CERR_1985"),
    bioms = ee.FeatureCollection("projects/mapbiomas-workspace/AUXILIAR/biomas-2019");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var biomNr = 5;
var biom_4s = [
'NONE', 'AMAZ', 'CAAT', 'CERR', 'MATA', 'PAMP', 'PANT'  
];
var biomNames = [ 
'NONE', 'AMAZONIA', 'CAATINGA', 'CERRADO', 'MATAATLANTICA', 'PAMPA', 'PANTANAL'  
];
var biom4 = biom_4s[biomNr];
var biomLimit = bioms.filter(ee.Filter.eq("CD_Bioma", biomNr));

var col = ee.ImageCollection("projects/mapbiomas-workspace/AMOSTRAS/GTAGUA/OBJETOS/CLASSIFICADOS/TESTE_1_raster")
  .filter(ee.Filter.eq("version", "2"));
var amaz = biomLimit;

var yearList = [
  1985, 1986, 1987, 1988, 1989, 1990,
  1991, 1992, 1993, 1994, 1995, 1996, 
  1997, 1998, 1999, 2000, 2001, 2002,
  2003, 2004, 2005, 2006, 2007, 2008, 
  2009, 2010, 2011, 2012, 2013, 2014,
  2015, 2016, 2017, 2018, 2019, 
  ];

var class_palette = ["ffffff", "0000ff", "00ffff", "ff00ff", "ff4400", "000000"];
var transition_palette = ["0000ff", "00ffff", "000000", "ffff00", "ff0000"];
var vis = {min:0, max:5, palette: class_palette};
var asBandsImg_vis = {};
var transitionImg_vis = {min:1, max:5, palette: transition_palette};


// --- chart -------------------------------------------------------------------
var collection = yearList.map(function (year_number) {
    return ee.Feature(null, {
        'year': String(year_number),
        'class_band': 'classification_' + year_number,
        'water_band': 'water_' + year_number,
        'system:yValue': 0
    });
});

var chart = ui.Chart.feature.byFeature(collection, 'year', 'system:yValue')
    .setChartType('LineChart')
    .setOptions({
        legend: 'none',
        lineWidth: 1,
        pointSize: 5,
        height: 100,
        vAxis: {
            gridlines: {
                count: 0
            }
        },
        'chartArea': {
            left: 30,
            top: 10,
            right: 30,
            width: '100%',
            height: '80%'
        },
        hAxis: {
            textPosition: 'in',
            showTextEvery: 1,
            interpolateNulls: true,
            slantedTextAngle: 90,
            slantedText: true,
            textStyle: {
                color: '#000000',
                fontSize: 12,
                fontName: 'Arial',
                bold: false,
                italic: false
            }
        },
        tooltip :{
          trigger: 'none',
        },
        colors: ['#FF0000'],
        crosshair: {
            trigger: 'both',
            orientation: 'vertical',
            focused: {
                color: '#0000ff'
            }
        }
    });

chart.style().set({
    position: 'bottom-center',
    width: '100%',
    height: '150px',
    margin: '0px',
    padding: '0px',
});

var year;

chart.onClick(function (xValue, yValue, seriesName) {
    if (!xValue) return;
    var feature = ee.Feature(
        ee.FeatureCollection(collection)
        .filter(ee.Filter.eq('year', xValue))
        .first()
    );
   year = ee.Number.parse(feature.get('year'), 10);
   
   aktualisier(year);
    
});



// -----------------------------------------------------------------------
var Map1 = ui.Map({
    style: {
        border: '2px solid black'
    }
});

var Map2 = ui.Map({
    style: {
        stretch: 'both',
        border: '2px solid black'
    }
});

Map1.addLayer(ee.Image(1).clip(amaz), {palette: "000000"}, "background", true, 0.5);
Map2.addLayer(ee.Image(1).clip(amaz), {palette: "000000"}, "background", true, 0.5);

Map1.addLayer(ee.Image().select(), {}, "dummy anual");
Map2.addLayer(ee.Image().select(), {}, "dummy anual");

var col_sFT = yearList.map(function (year) {
  var pathImg = ee.FeatureCollection("projects/mapbiomas-workspace/AMOSTRAS/GTAGUA/OBJETOS/CLASSIFICADOS/TESTE_1/" + biom4 + "/AGUA_teste_1_" + biom4 + "_" + year);
  var img_anual = pathImg.reduceToImage(["classification"], ee.Reducer.firstNonNull());
  return img_anual.byte();
});
var s_bandNames = yearList.map(function (year) {
  return "s_" + year; 
});
var asBandsImg_sFT = ee.ImageCollection.fromImages(col_sFT).toBands().rename(s_bandNames);

var col_cFT = yearList.map(function (year) {
  var img = col
    .filter(ee.Filter.eq("year", year))
    .filter(ee.Filter.eq("biome", biomNames[biomNr]))
    .first();
  return img.byte();
});
var c_bandNames = yearList.map(function (year) {
  return "c_" + year; 
});
var asBandsImg_cFT = ee.ImageCollection.fromImages(col_cFT).toBands().rename(c_bandNames);

// var transitionImg_sFT_eq1 = ee.ImageCollection.fromImages(col_sFT).map(function (i) {return i.eq(1);}).sum().eq(ee.Image.constant(col_sFT.size()));
// var transitionImg_sFT_eq2 = ee.ImageCollection.fromImages(col_sFT).map(function (i) {return i.eq(2);}).sum().eq(ee.Image.constant(col_sFT.size()));
// var transitionImg_sFT_eq3 = ee.ImageCollection.fromImages(col_sFT).map(function (i) {return i.eq(5);}).sum().eq(ee.Image.constant(col_sFT.size()));
// var transitionImg_sFT_eq4 
// var transitionImg_sFT_eq5 

var count_cFT = ee.ImageCollection.fromImages(col_cFT).map(function (i) {return i.gte(1)}).sum();

var transitionImg_cFT_eq1 = ee.ImageCollection.fromImages(col_cFT).map(function (i) {return i.eq(1);}).sum().eq(count_cFT);
var transitionImg_cFT_eq2 = ee.ImageCollection.fromImages(col_cFT).map(function (i) {return i.gte(2).and(i.neq(5));}).sum().eq(count_cFT);
var transitionImg_cFT_eq3 = ee.ImageCollection.fromImages(col_cFT).map(function (i) {return i.eq(5);}).sum().eq(count_cFT);
var transitionImg_cFT_eq4 = ee.ImageCollection.fromImages(col_cFT).map(function (i) {
  var nat = i.eq(1).multiply(100);
  var ant = i.eq(2);
  return nat.addBands(ant).reduce(ee.Reducer.sum());
}).sum();
transitionImg_cFT_eq4 = transitionImg_cFT_eq4.gt(100).and(transitionImg_cFT_eq4.mod(100).gt(0));
var transitionImg_cFT_eq5 = count_cFT.gt(0)
  .where(transitionImg_cFT_eq1.eq(1), 0)
  .where(transitionImg_cFT_eq2.eq(1), 0)
  .where(transitionImg_cFT_eq3.eq(1), 0)
  .where(transitionImg_cFT_eq4.eq(1), 0)
  .selfMask();

// var transitionImg_sFT = ee.Image(0)
//   .where(transitionImg_sFT_eq1.eq(1), 1)
//   .where(transitionImg_sFT_eq2.eq(1), 2)
//   .where(transitionImg_sFT_eq3.eq(1), 3)
//   .where(transitionImg_sFT_eq4.eq(1), 4)
//   .where(transitionImg_sFT_eq5.eq(1), 5)
//   .selfMask();

var transitionImg_cFT = ee.Image(0)
  .where(transitionImg_cFT_eq1.eq(1), 1)
  .where(transitionImg_cFT_eq2.eq(1), 2)
  .where(transitionImg_cFT_eq3.eq(1), 3)
  .where(transitionImg_cFT_eq4.eq(1), 4)
  .where(transitionImg_cFT_eq5.eq(1), 5)
  .selfMask();  

Map1.addLayer(asBandsImg_sFT, asBandsImg_vis, "série histórica, sem FT", false);
Map1.addLayer(asBandsImg_cFT, asBandsImg_vis, "série histórica, com FT", false);
// Map1.addLayer(transitionImg_sFT, transitionImg_vis, "categ. transições, sem FT", false);

Map2.addLayer(asBandsImg_sFT, asBandsImg_vis, "série histórica, sem FT", false);
Map2.addLayer(asBandsImg_cFT, asBandsImg_vis, "série histórica, com FT", false);
Map2.addLayer(transitionImg_cFT, transitionImg_vis, "categ. transições, com FT", false);

var legendize1 = require('users/frederickirchhoff/shortcuts:legendize').legendize;
var legendize2 = require('users/frederickirchhoff/shortcuts:legendize_background_position').legendize;

var legend1 = legendize1(
  "Corpos Hídircos (sem FT)", 
  ["Natural (1)", "Antrópico (2)", "Hidrelétrica (3)", "Mineração (4)", "Falso Positivo (5)"],
  ["0000ff", "00ffff", "ff00ff", "ff4400", "000000"]
);
Map1.add(legend1);

var legend2 = legendize2(
  "Corpos Hídircos (com FT)", 
  ["Natural (1)", "Antrópico (2)", "Hidrelétrica (3)", "Mineração (4)", "Falso Positivo (5)"],
  ["0000ff", "00ffff", "ff00ff", "ff4400", "000000"],
  "ffffff",
  "bottom-right"
);
Map2.add(legend2);

// var legend1_transition = legendize1(
//   "4 transições (sem FT)", 
//   ["Sempre Natural", "Sempre Antrópico", "Sempre Falso Pos.", "Natural -> Antrópico", "Seq. inválida"],
//   transition_palette
// );
// Map1.add(legend1);

var legend2_transition = legendize2(
  "4 transições (com FT)", 
  ["Sempre Natural", "Sempre Antrópico", "Sempre Falso Pos.", "Natural -> Antrópico", "Seq. inválida"],
  transition_palette,
  "ffffff",
  "bottom-right"
);
Map2.add(legend2_transition);


var linker = ui.Map.Linker([Map1, Map2]);

var splitPanel = new ui.SplitPanel({
    firstPanel: linker.get(0),
    secondPanel: linker.get(1),
    orientation: 'horizontal',
    wipe: true,
    style: {
        stretch: 'both'
    }
});

function aktualisier(year) {
  
  var layer1_anual = Map1.layers().get(1);

  var layer2_anual = Map2.layers().get(1);
  
  Map1.layers().remove(layer1_anual);

  Map2.layers().remove(layer2_anual);
  
  var yearGotInfo = year.getInfo();
  var pathImg = ee.FeatureCollection("projects/mapbiomas-workspace/AMOSTRAS/GTAGUA/OBJETOS/CLASSIFICADOS/TESTE_1/" + biom4 + "/AGUA_teste_1_" + biom4 + "_" + yearGotInfo);
  var img_anual_1 = pathImg.reduceToImage(["classification"], ee.Reducer.firstNonNull());

  var img_anual_2 = col
    .filter(ee.Filter.eq("year", year))
    .filter(ee.Filter.eq("biome", biomNames[biomNr]))
    .first();

  var layer1_new_anual = ui.Map.Layer(img_anual_1, vis, "corpos hídricos", true, 1);

  var layer2_new_anual = ui.Map.Layer(img_anual_2.focal_mode(0.5), vis, "corpos hídricos (FT)", true, 1);
 
  Map1.layers().insert(1, layer1_new_anual);

  Map2.layers().insert(1, layer2_new_anual);
  Map1.style().set('cursor', 'crosshair')
  Map2.style().set('cursor', 'crosshair')
  
}

Map1.centerObject(amaz.first().geometry().bounds(), 5);
Map1.style().set('cursor', 'crosshair')
Map2.style().set('cursor', 'crosshair')
  

var panel0 = ui.Panel([splitPanel],
    ui.Panel.Layout.Flow('vertical', true), {
        stretch: 'both'
    }
);

var panel = ui.Panel([
  panel0, 
  // panel1, 
  chart],
    ui.Panel.Layout.Flow('vertical'), {
        stretch: 'both'
    });
ui.root.widgets().reset([panel]);
ui.root.setLayout(ui.Panel.Layout.Flow('vertical'));